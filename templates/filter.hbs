# Filter Object README

## [{{filterDescriptor.operationID}}::{{filterDescriptor.operationName}}]

**{{filterDescriptor.operationDescription}}**

### Operation

This operation is dispatched by calling the filter object's `request` method passing a single value `input`:

```JavaScript
var response = filter.request(input);
if (response.error) {
    throw new Error(response.error); // <- response.result invalid
}
var result = response.result; // <- response.result valid
```

### Request Input

{{#if filterStages.input}}
This filter normalizes the value of `input` passed to its `request` method using the following filter spec contract:

```JavaScript
{{{inputJSON}}}
```
{{else}}
This filter accepts any single input parameter value including [object Undefined] is as valid input to this filter's `request` method.
{{/if}}


### Response Output

This filter's `request` method returns a normalized `response` object when called.

```JavaScript
var response = filter.request(input);
var result = undefined; // assume nothing
// You must check for an error condition.
if (!response.error) {
    // Operation succeeded and response.result is a valid value.
    result = response.result;
} else {
    // Operation failed and response.error is a string error message.
    throw new Error(response.error); // e.g.
}
// Use value held by result variable for subsequent operations...
```
#### Result Format

{{#if filterStages.output}}

If no error then the value assigned to `response.result` is normalized per the following filter spec contract:

```JavaScript
{{{outputJSON}}}
```
{{else}}
If no error then any value type including [object Undefined] may be assigned to `response.result`.
{{/if}}


## Implementation

### Identifiers

| filter identifier | version independent | version dependent |
|--------|---------------------|-------------------|
| operation | `{{filterDescriptor.operationID}}` | `{{filterDescriptor.operationVDID}}` |
| input contract | `{{filterDescriptor.inputTypeVIID}}` | `{{filterDescriptor.inputTypeVDID}}` |
| output contract | `{{filterDescriptor.outputTypeVIID}}` | `{{filterDescriptor.outputTypeVDID}}` |

### Configuration
Filter classification:  **{{filterClassification}}**

| request stage | stage description | state |
|-------|---------|---------------|
| 1. Input Filter | Rejects invalid input requests and shapes to well-formed. | {{filterStages.input}} |
| 2. Operation | Developer-defined custom data transformation function. | {{filterStages.body}} |
| 3. Response Filter | Verifies the response of the developer-defined operation function. | {{filterStages.response}} |
| 4. Output Filter | Rejects invalid output result data and shapes to well-formed. | {{filterStages.output}} |

## About
Filters are created with the [Encapsule/arccore](https://github.com/Encapsule/arccore/) library.<br>
This document was generated with {{generator}} toolset.<br>
Document updated {{generatorDate}}

